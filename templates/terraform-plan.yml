steps:
  - task: terraformInstaller@0
    displayName: "Install Terraform $(tf_version)"
    inputs:
      terraformVersion: $(tf_version)
  #- task: AzureCLI@2
  #  displayName: "Break lease on terraform state"
  #  name: BreakLease
  #  inputs:
  #    azureSubscription: ${{ parameters.az_service_connection }}
  #    scriptType: "pscore"
  #    scriptLocation: "inlineScript"
  #    inlineScript: "az storage blob lease break --container-name '$(tf_state_container_name)' --blob-name '$(tf_environment).terraform.tfstate' --account-name '$(tf_state_stgacct_name)'"
  - task: TerraformTaskV2@2
    displayName: "Run > terraform init"
    inputs:
      provider: "azurerm"
      command: "init"
      commandOptions: "-input=false"
      backendServiceArm: ${{ parameters.az_service_connection }}
      backendAzureRmResourceGroupName: "$(tf_state_rg)"
      backendAzureRmStorageAccountName: "$(tf_state_stgacct_name)"
      backendAzureRmContainerName: $(tf_state_container_name)
      backendAzureRmKey: "$(tf_environment).terraform.tfstate"
      workingDirectory: "$(System.DefaultWorkingDirectory)/terraform"
  - task: TerraformTaskV2@2
    displayName: "Run > terraform plan"
    inputs:
      command: "plan"
      commandOptions: "-input=false -no-color -var-file=env/$(tf_environment).tfvars -out=$(Build.ArtifactStagingDirectory)/$(tf_environment).tfplan"
      environmentServiceNameAzureRM: ${{ parameters.az_service_connection }}
      workingDirectory: "$(System.DefaultWorkingDirectory)/terraform"
  - task: CopyFiles@2
    displayName: "Copy Terraform Files"
    inputs:
      sourceFolder: ./terraform
      contents: |
        **
        !.terraform/**/*
      targetFolder: $(Build.ArtifactStagingDirectory)
  - task: PublishBuildArtifacts@1
    displayName: "Publish Terraform Files"
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: '$(tf_environment)-terraform-plan'